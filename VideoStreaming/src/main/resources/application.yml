server:
  port: 10000
  servlet:
    context-path: /video
spring:
  application:
    name: video.streaming
  security:
    props:
      secret: ${SECURITY_SECRET:} # only for HS256
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:100MB}
      max-request-size: ${MAX_FILE_SIZE:100MB}
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://database:5432/videostreaming}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:postgres}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database: POSTGRESQL
  jackson:
    deserialization:
      fail-on-unknown-properties: false
  kafka:
    topic: statistics
    producer:
      acks: -1
      bootstrap-servers: ${KAFKA_URL:kafka:29092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://service.discovery:8761/eureka}
  instance:
    preferIpAddress: true

app:
  streaming:
    default-chunk-size: 3145728 #value in bytes

minio:
  url: ${MINIO_URI:http://minio:9000}
  username: ${DATABASE_USERNAME:admin}
  password: ${DATABASE_PASSWORD:password}
  put-object-part-size: 5242880 #value in bytes (minimum is 5 MB equivalent)

management:
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: health, info
  endpoint:
    health:
      enabled: true
      show-details: always
    info:
      enabled: true

public:
  endpoints: /actuator,/actuator/health,/actuator/info

###################################### Async Config
async:
  task:
    executor:
      poolSize:
        core: 10
        max: 10
      keepAliveTime: 60
      queueCapacity: 500
      threadNamePrefix: VideoStreaming-
